// <auto-generated />
using System;
using DoctorsOffice.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DoctorsOffice.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("text");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Interview")
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Recommendations")
                        .HasColumnType("text");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("56a26dea-caf2-4a4b-a013-ed9e776d25dc"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2022, 11, 7, 7, 0, 0, 0, DateTimeKind.Utc),
                            Description = "0",
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            PatientId = new Guid("4facc425-b1ef-416a-979f-56da897448c5"),
                            StatusId = new Guid("b7a08d2e-116d-42e3-9ec5-1aa0636d116c"),
                            TypeId = new Guid("e58cabc9-e259-42ff-a2a1-0e8d39bb900e"),
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("9e1cf297-b90f-436a-8cd3-8ca95276872f"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2022, 11, 8, 8, 0, 0, 0, DateTimeKind.Utc),
                            Description = "1000000",
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            PatientId = new Guid("4facc425-b1ef-416a-979f-56da897448c5"),
                            StatusId = new Guid("8445a2f4-97cd-45c9-921f-f649f85cc0be"),
                            TypeId = new Guid("e58cabc9-e259-42ff-a2a1-0e8d39bb900e"),
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("4f319bc2-a6d9-4a52-9357-0772d0edd639"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2022, 11, 9, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "2000000",
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            PatientId = new Guid("4facc425-b1ef-416a-979f-56da897448c5"),
                            StatusId = new Guid("1cf993e4-73f2-497f-ad38-bccb4b4d0eee"),
                            TypeId = new Guid("e58cabc9-e259-42ff-a2a1-0e8d39bb900e"),
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("f32e24af-265d-4748-be59-769db539cb07"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2022, 11, 10, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "3000000",
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            PatientId = new Guid("4facc425-b1ef-416a-979f-56da897448c5"),
                            StatusId = new Guid("ccbb0db5-1661-4f9b-9482-67280ebdb6b5"),
                            TypeId = new Guid("e58cabc9-e259-42ff-a2a1-0e8d39bb900e"),
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("2cf674a8-9311-4515-a6bb-8d8094ade09c"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2022, 11, 11, 11, 0, 0, 0, DateTimeKind.Utc),
                            Description = "4000000",
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            PatientId = new Guid("4facc425-b1ef-416a-979f-56da897448c5"),
                            StatusId = new Guid("5de8a7ba-fb65-464f-9583-181d20d44b1b"),
                            TypeId = new Guid("e58cabc9-e259-42ff-a2a1-0e8d39bb900e"),
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.AppointmentStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("AppointmentStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8445a2f4-97cd-45c9-921f-f649f85cc0be"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "ACCEPTED",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("ccbb0db5-1661-4f9b-9482-67280ebdb6b5"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "CANCELLED",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("5de8a7ba-fb65-464f-9583-181d20d44b1b"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "COMPLETED",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("b7a08d2e-116d-42e3-9ec5-1aa0636d116c"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "PENDING",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("1cf993e4-73f2-497f-ad38-bccb4b4d0eee"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "REJECTED",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.AppointmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("AppointmentTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e58cabc9-e259-42ff-a2a1-0e8d39bb900e"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DurationMinutes = 60,
                            Name = "Checkup",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("532ec4d6-a4ad-4ece-a0b5-9f03e1033bf5"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DurationMinutes = 30,
                            Name = "Consultation",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6506ab69-c793-4d0a-87d4-6565e98523d4"),
                            ConcurrencyStamp = "6506ab69-c793-4d0a-87d4-6565e98523d4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("d4349d0c-d18c-4324-be02-254ad1208004"),
                            ConcurrencyStamp = "d4349d0c-d18c-4324-be02-254ad1208004",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        },
                        new
                        {
                            Id = new Guid("80389a16-fbd0-4db1-b655-05a29d202a75"),
                            ConcurrencyStamp = "80389a16-fbd0-4db1-b655-05a29d202a75",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        });
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.DrugItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<long>("Rxcui")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("DrugItems");
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FulfillmentDeadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.QuickButton", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("QuickButtons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("df3f8ee7-a5e2-4c2a-a2f8-e598b560947d"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Interview",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Cough"
                        },
                        new
                        {
                            Id = new Guid("cc53e419-d5c6-4131-b77a-4040e279c83b"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Interview",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Fever"
                        },
                        new
                        {
                            Id = new Guid("b0437003-e8c6-4cd5-858e-bc9cfe12357f"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Interview",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Headache"
                        },
                        new
                        {
                            Id = new Guid("814e13d2-0e02-4380-bc7f-692280ea68e2"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Interview",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Sore throat"
                        },
                        new
                        {
                            Id = new Guid("2c9c5afa-9331-4d23-87da-ac59217ac1fb"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Interview",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Fatigue"
                        },
                        new
                        {
                            Id = new Guid("d548b5e1-6f9b-44ec-bc33-0ed7f3f0e460"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Interview",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Loss of smell"
                        },
                        new
                        {
                            Id = new Guid("30101274-f6d5-4b7e-9d06-b9e816c801b5"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Interview",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Loss of taste"
                        },
                        new
                        {
                            Id = new Guid("aca1f0bc-25f6-463f-aa93-45cb64cc5d7c"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Interview",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Diarrhea"
                        },
                        new
                        {
                            Id = new Guid("521affee-54ee-48a5-ba36-0217e0bbb5d0"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Interview",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Nausea"
                        },
                        new
                        {
                            Id = new Guid("9d7dd8b1-9cd9-4673-8900-6240a27d1847"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Interview",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Vomiting"
                        },
                        new
                        {
                            Id = new Guid("7026dc95-3957-4779-bdc3-59294b8d8faa"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Interview",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Shortness of breath"
                        },
                        new
                        {
                            Id = new Guid("1deba9b9-0eeb-43d7-a95a-768a32a86f26"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Interview",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Chest pain"
                        },
                        new
                        {
                            Id = new Guid("0b6747a5-9eea-4484-a192-6ad927025b84"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Interview",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Muscle pain"
                        },
                        new
                        {
                            Id = new Guid("963dc7c0-fb0e-44b8-bf59-7048d241f807"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Interview",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Confusion"
                        },
                        new
                        {
                            Id = new Guid("2ea7fa99-42c7-4b75-a673-2435a2c50584"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Diagnosis",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "COVID-19"
                        },
                        new
                        {
                            Id = new Guid("9dd0b024-e5dd-4169-bd91-391d6fbb615c"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Diagnosis",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Influenza"
                        },
                        new
                        {
                            Id = new Guid("e6d6e719-f349-417a-83e5-f9ef4c41543f"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Diagnosis",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Common cold"
                        },
                        new
                        {
                            Id = new Guid("cf407c2a-cf8a-404a-b07a-91f871e4a8cc"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Diagnosis",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Pneumonia"
                        },
                        new
                        {
                            Id = new Guid("32368078-8d03-4ad2-8bc1-d683a94e82ed"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Diagnosis",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Bronchitis"
                        },
                        new
                        {
                            Id = new Guid("8a9ee513-9ff5-4b40-bb09-59730a829c77"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Diagnosis",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Tuberculosis"
                        },
                        new
                        {
                            Id = new Guid("179dfb23-44f4-49ec-bf10-159ef4ca6954"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Diagnosis",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Chronic obstructive pulmonary disease"
                        },
                        new
                        {
                            Id = new Guid("75c22761-f498-4973-86fb-cf1b13dd729e"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Diagnosis",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Acute bronchitis"
                        },
                        new
                        {
                            Id = new Guid("a86c35ee-f3a0-4c18-8494-3e9c201dfcf0"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Diagnosis",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Acute sinusitis"
                        },
                        new
                        {
                            Id = new Guid("6f72df4d-d279-4fc4-bd22-67d3ba33cadc"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Diagnosis",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Acute pharyngitis"
                        },
                        new
                        {
                            Id = new Guid("48ff8e51-0164-4194-90c5-9e0dd87b864d"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Diagnosis",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Acute tonsillitis"
                        },
                        new
                        {
                            Id = new Guid("e53c4fab-e86a-4c03-9ad4-431846ff8467"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Diagnosis",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Acute otitis media"
                        },
                        new
                        {
                            Id = new Guid("60898d97-32e0-4841-bec0-6ffd3f15cb9c"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Diagnosis",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Acute bronchiti"
                        },
                        new
                        {
                            Id = new Guid("41589b18-4df9-4f02-a101-af827964b3e3"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Antibiotics"
                        },
                        new
                        {
                            Id = new Guid("5aa836ee-00c1-4f7b-8c5e-b74d7162fe3c"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Antiviral drugs"
                        },
                        new
                        {
                            Id = new Guid("9bb77950-3379-4c77-9213-b43950976939"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Antifungal drugs"
                        },
                        new
                        {
                            Id = new Guid("650c86c0-c74e-4101-9777-4598873e1050"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Antiparasitic drugs"
                        },
                        new
                        {
                            Id = new Guid("1e310e93-070b-4202-8dc3-f514fce5a3b9"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Antihistamines"
                        },
                        new
                        {
                            Id = new Guid("3652b57a-07e4-4915-b22a-581e76f58448"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Corticosteroids"
                        },
                        new
                        {
                            Id = new Guid("57581436-4e1b-4856-bc53-d52c24c2fd65"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Bronchodilators"
                        },
                        new
                        {
                            Id = new Guid("9390cf8d-f52a-4527-9f17-d785d281637e"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Decongestants"
                        },
                        new
                        {
                            Id = new Guid("7a46084f-288c-4bbe-8da1-5ea97ca48ea6"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Expectorants"
                        },
                        new
                        {
                            Id = new Guid("2027a099-57ce-4fbe-9d38-1c7c337a8e50"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Mucolytics"
                        },
                        new
                        {
                            Id = new Guid("7ff91ada-1ec7-46e4-b2d6-435e5cbbf38d"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Antitussives"
                        },
                        new
                        {
                            Id = new Guid("a3c3d331-21c9-48eb-aace-ddffcd3d9331"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Antiemetics"
                        },
                        new
                        {
                            Id = new Guid("4a87b3bd-5877-4388-9239-69f4e83bc322"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Antipyretics"
                        },
                        new
                        {
                            Id = new Guid("e3a88a80-5c6d-4060-a8d7-7af07db8e3e4"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Analgesics"
                        },
                        new
                        {
                            Id = new Guid("7582bbb7-9ecb-47d5-a742-891b514d60de"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Antacids"
                        },
                        new
                        {
                            Id = new Guid("c10ae801-7042-485f-a528-539503c568b7"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Antispasmodics"
                        },
                        new
                        {
                            Id = new Guid("5da4cdd1-9923-4cc9-aa08-eaf0e4003e0b"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Antidiarrheals"
                        },
                        new
                        {
                            Id = new Guid("7d80a7b1-599d-457f-b8a3-7f963f0fed98"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Rest"
                        },
                        new
                        {
                            Id = new Guid("53e76e9d-6093-41f3-8de9-8d6c33434f71"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Fluids"
                        },
                        new
                        {
                            Id = new Guid("8ea7023f-f79b-4dc7-965a-890cdd68ba9c"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Vitamin C"
                        },
                        new
                        {
                            Id = new Guid("a2c32b19-cd8f-495c-a11e-1c34eec818fe"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Vitamin D"
                        },
                        new
                        {
                            Id = new Guid("47a50b1f-e874-4964-831b-d677941e9ecf"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Vitamin E"
                        },
                        new
                        {
                            Id = new Guid("e015b806-ea24-4741-853c-2628d1393ad7"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Vitamin B6"
                        },
                        new
                        {
                            Id = new Guid("0eeb68fc-ccdf-4102-b6da-2f9dd939bc3e"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Vitamin B12"
                        },
                        new
                        {
                            Id = new Guid("dcb02f21-0ed8-4c97-8f2f-2b58a42c6de3"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Vitamin K"
                        },
                        new
                        {
                            Id = new Guid("074dacb8-0264-4a3b-8627-1581cf14ec3a"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            Type = "Recommendations",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Vitamin A"
                        });
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.SickLeave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("SickLeaves");
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.Timetable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Timetables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b35a855-e2c1-4b52-abfb-5ff0a8835151"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            EndDateTime = new DateTime(2022, 11, 7, 10, 0, 0, 0, DateTimeKind.Utc),
                            StartDateTime = new DateTime(2022, 11, 7, 7, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("359aa6bc-73aa-424b-a759-59f7f5da6dcf"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            EndDateTime = new DateTime(2022, 11, 8, 11, 0, 0, 0, DateTimeKind.Utc),
                            StartDateTime = new DateTime(2022, 11, 8, 8, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("8967971c-193a-4c58-a326-9dced9182682"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            EndDateTime = new DateTime(2022, 11, 9, 12, 0, 0, 0, DateTimeKind.Utc),
                            StartDateTime = new DateTime(2022, 11, 9, 9, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("fc2967c1-e0d8-4fa4-b7a0-f258ad53946e"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            EndDateTime = new DateTime(2022, 11, 10, 13, 0, 0, 0, DateTimeKind.Utc),
                            StartDateTime = new DateTime(2022, 11, 10, 10, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("befcae26-e2c6-482f-b2bb-50309916b89e"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoctorId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            EndDateTime = new DateTime(2022, 11, 11, 14, 0, 0, 0, DateTimeKind.Utc),
                            StartDateTime = new DateTime(2022, 11, 11, 11, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.UserTypes.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2f0ccba-ce3c-4ce4-8167-b79d88117c05"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.UserTypes.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2f0ccba-ce3c-4ce4-8167-b79d88117c05"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2f0ccba-ce3c-4ce4-8167-b79d88117c05",
                            Email = "admin@doms.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            NormalizedEmail = "ADMIN@DOMS.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "ACwoXDy/z+O6bjrLgviDbsZ036YrMsYj/fMPviVIsW1welLPf0g9dCgRkUTW3JOSpA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f2f0ccba-ce3c-4ce4-8167-b79d88117c05",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8934fff-2f5a-4198-893f-26023d8f4107",
                            Email = "doctor@doctor.com",
                            EmailConfirmed = true,
                            FirstName = "Doctor",
                            LastName = "Doctor",
                            NormalizedEmail = "DOCTOR@DOCTOR.COM",
                            NormalizedUserName = "DOCTOR",
                            PasswordHash = "AMbTv46BLUYaRTuuF5U53eDGMBRw4T7wQwaxSxTrM4mPB87g87fP+FW4n+ecgCXCdg==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8934fff-2f5a-4198-893f-26023d8f4107",
                            TwoFactorEnabled = false,
                            UserName = "doctor"
                        },
                        new
                        {
                            Id = new Guid("4facc425-b1ef-416a-979f-56da897448c5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4facc425-b1ef-416a-979f-56da897448c5",
                            Email = "patient@patient.com",
                            EmailConfirmed = true,
                            FirstName = "Patient",
                            LastName = "Patient",
                            NormalizedEmail = "PATIENT@PATIENT.COM",
                            NormalizedUserName = "PATIENT",
                            PasswordHash = "AL9EaDGX0cdo1q6ldEn3SDtSYoYHcRpcEBXmM4TUfF+hOIT06L6ZfvndiURMFQEphw==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4facc425-b1ef-416a-979f-56da897448c5",
                            TwoFactorEnabled = false,
                            UserName = "patient"
                        });
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.UserTypes.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.UserTypes.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4facc425-b1ef-416a-979f-56da897448c5"),
                            Address = "7865 Greenview St. Randallstown, MD 21133",
                            CreatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(2000, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            NationalId = "04233040549",
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("f2f0ccba-ce3c-4ce4-8167-b79d88117c05"),
                            RoleId = new Guid("6506ab69-c793-4d0a-87d4-6565e98523d4")
                        },
                        new
                        {
                            UserId = new Guid("c8934fff-2f5a-4198-893f-26023d8f4107"),
                            RoleId = new Guid("80389a16-fbd0-4db1-b655-05a29d202a75")
                        },
                        new
                        {
                            UserId = new Guid("4facc425-b1ef-416a-979f-56da897448c5"),
                            RoleId = new Guid("d4349d0c-d18c-4324-be02-254ad1208004")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("DoctorsOffice.Domain.Entities.UserTypes.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorsOffice.Domain.Entities.UserTypes.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorsOffice.Domain.Entities.AppointmentStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorsOffice.Domain.Entities.AppointmentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.DrugItem", b =>
                {
                    b.HasOne("DoctorsOffice.Domain.Entities.Prescription", "Prescription")
                        .WithMany("DrugItems")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.Prescription", b =>
                {
                    b.HasOne("DoctorsOffice.Domain.Entities.Appointment", "Appointment")
                        .WithMany("Prescriptions")
                        .HasForeignKey("AppointmentId");

                    b.HasOne("DoctorsOffice.Domain.Entities.UserTypes.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorsOffice.Domain.Entities.UserTypes.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.QuickButton", b =>
                {
                    b.HasOne("DoctorsOffice.Domain.Entities.UserTypes.Doctor", "Doctor")
                        .WithMany("QuickButtons")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.SickLeave", b =>
                {
                    b.HasOne("DoctorsOffice.Domain.Entities.Appointment", "Appointment")
                        .WithMany("SickLeaves")
                        .HasForeignKey("AppointmentId");

                    b.HasOne("DoctorsOffice.Domain.Entities.UserTypes.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorsOffice.Domain.Entities.UserTypes.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.Timetable", b =>
                {
                    b.HasOne("DoctorsOffice.Domain.Entities.UserTypes.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.UserTypes.Admin", b =>
                {
                    b.HasOne("DoctorsOffice.Domain.Entities.UserTypes.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.UserTypes.AppUser", b =>
                {
                    b.OwnsMany("DoctorsOffice.Domain.Entities.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<Guid>("AppUserId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("CreatedByIp")
                                .HasColumnType("text");

                            b1.Property<DateTime>("ExpiresAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ReasonRevoked")
                                .HasColumnType("text");

                            b1.Property<string>("ReplacedByToken")
                                .HasColumnType("text");

                            b1.Property<DateTime?>("RevokedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("RevokedByIp")
                                .HasColumnType("text");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("UpdatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("Id");

                            b1.HasIndex("AppUserId");

                            b1.ToTable("RefreshTokens");

                            b1.WithOwner()
                                .HasForeignKey("AppUserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.UserTypes.Doctor", b =>
                {
                    b.HasOne("DoctorsOffice.Domain.Entities.UserTypes.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.UserTypes.Patient", b =>
                {
                    b.HasOne("DoctorsOffice.Domain.Entities.UserTypes.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("DoctorsOffice.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DoctorsOffice.Domain.Entities.UserTypes.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DoctorsOffice.Domain.Entities.UserTypes.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("DoctorsOffice.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorsOffice.Domain.Entities.UserTypes.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DoctorsOffice.Domain.Entities.UserTypes.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.Appointment", b =>
                {
                    b.Navigation("Prescriptions");

                    b.Navigation("SickLeaves");
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.Prescription", b =>
                {
                    b.Navigation("DrugItems");
                });

            modelBuilder.Entity("DoctorsOffice.Domain.Entities.UserTypes.Doctor", b =>
                {
                    b.Navigation("QuickButtons");
                });
#pragma warning restore 612, 618
        }
    }
}
